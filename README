Pyfenv is a module for giving access to additional features of
IEEE-754 arithmetic beyond those available in standard Python.
These features were added to standard C in the C99 spec, in the
form of the `<fenv.h>` include file.

> **Warning:** this module may be specific to Python on *x*86 compiled
> with the GCC compiler. It may even behave differently in future
> versions of Python.

See the enclosed `setup.py` script for information on how to install
pyfenv. Once installed, it will be available as a module called
`fenv`.

Subsequent code snippets will assume the following imports:

    import sys
    import math
    import fenv

## Classification ##

`fenv.FP` is an enumeration of all the different classes of numbers in
IEEE 754, and the `classify` class method tells you the classification
of a number. Python’s `math` module provides `isfinite`, `isinf` and
`isnan` queries, but is missing `isnormal`:

    for val in \
        (
            math.inf,
            math.inf + math.inf,
            math.inf - math.inf,
            math.pi,
            sys.float_info.min,
            sys.float_info.min * sys.float_info.epsilon,
            sys.float_info.min * sys.float_info.epsilon / 2,
            sys.float_info.min - sys.float_info.min * sys.float_info.epsilon,
        ) \
    :
        sys.stdout.write \
          (
                "%-24.17g  %-12s  %-5s %-5s %-5s %-5s\n"
            %
                (
                    val,
                    fenv.FP.classify(val),
                    fenv.isnormal(val), math.isfinite(val), math.isinf(val), math.isnan(val),
                )
          )
    #end for

produces the output:

    inf                       FP.INFINITE   False False True  False
    inf                       FP.INFINITE   False False True  False
    nan                       FP.NAN        False False False True 
    3.1415926535897931        FP.NORMAL     True  True  False False
    2.2250738585072014e-308   FP.NORMAL     True  True  False False
    4.9406564584124654e-324   FP.SUBNORMAL  False True  False False
    0                         FP.ZERO       False True  False False
    2.2250738585072009e-308   FP.SUBNORMAL  False True  False False

## Next-After ##

`fenv` also gives access to the `nextafter` function, which lets you
take `sys.float_info.epsilon`-sized steps through the real-number
space.

    for val in \
        (
            sys.float_info.min,
            fenv.nextafter(sys.float_info.min, 1),
            fenv.nextafter(sys.float_info.min, 0),
            sys.float_info.min * sys.float_info.epsilon,
            fenv.nextafter(sys.float_info.min * sys.float_info.epsilon, 1),
            fenv.nextafter(sys.float_info.min * sys.float_info.epsilon, 0),
        ) \
    :
        sys.stdout.write \
          (
            "%-24.17g  %-12s\n" % (val, fenv.FP.classify(val))
          )
    #end for

produces output

    2.2250738585072014e-308   FP.NORMAL   
    2.2250738585072019e-308   FP.NORMAL   
    2.2250738585072009e-308   FP.SUBNORMAL
    4.9406564584124654e-324   FP.SUBNORMAL
    9.8813129168249309e-324   FP.SUBNORMAL
    0                         FP.ZERO

This shows why subnormal numbers are important: if they did not exist,
then the value of `fenv.nextafter(sys.float_info.min, 0)` would be
zero, a much larger step from `sys.float_info.min` than in the
opposite direction, to `fenv.nextafter(sys.float_info.min, 1)`.

## Rounding ##

IEEE 754 defines four different rounding modes: to-nearest, upwards,
downwards, and towards zero. `fenv` provides the `ROUND` enumeration,
with symbolic names for all these modes. To-nearest is the usual
default:

    print(fenv.ROUND.get())

produces output

    ROUND.TONEAREST

Python’s built-in `round` function always rounds to nearest; so `fenv`
provides its own access to the standard C99 functions, `nearbyint` and
`rint`, that obey the current rounding mode.

The following shows the difference in behaviour of the rounding modes:

    with fenv.SaveRounding() :
        for r in fenv.ROUND :
            r.set()
            sys.stdout.write("%s" % r)
            for a in (3.5, -3.5, 4.5, -4.5) :
                sys.stdout.write(", %g => %g" % (a, fenv.nearbyint(a)))
            #end for
            sys.stdout.write("\n")
        #end for
    #end with

produces output

    ROUND.TONEAREST, 3.5 => 4, -3.5 => -4, 4.5 => 4, -4.5 => -4
    ROUND.DOWNWARD, 3.5 => 3, -3.5 => -4, 4.5 => 4, -4.5 => -5
    ROUND.UPWARD, 3.5 => 4, -3.5 => -3, 4.5 => 5, -4.5 => -4
    ROUND.TOWARDZERO, 3.5 => 3, -3.5 => -3, 4.5 => 4, -4.5 => -4

Note the use of the `SaveRounding` context manager class provided by
fenv, so that the default rounding mode is correctly restored
afterward.

## Exceptions ##

*Exceptions* in IEEE 754 are not exceptions in the Python sense: they
are merely bits in a status register, which can become set under
certain conditions in a calculation. Once set, they remain set until
explicitly cleared. They can also be explicitly set. The meanings of
these exception bits are:

* `INVALID` — the calculation cannot produce a valid result (e.g. for
  real values only, trying to obtain the square root of a negative
  number, or an arcsine or arccosine of an argument with magnitude
  greater than 1).
* `DENORM` — the result is so close to zero that it can only be
  represented using a “denormalized” number, which has less precision
  than the usual “normalized” range.
* `DIVBYZERO` — division by zero (*i.e.* result is infinity).
* `OVERFLOW` — the magnitude of the result, while finite, is too large
  to be represented by any available finite value. `INEXACT` will also
  be set.
* `UNDERFLOW` — the magnitude of the result, while not exactly zero,
  is too close to zero to be represented by any normalized nonzero
  value. `INEXACT` will also be set.
* `INEXACT` — the result cannot be represented exactly.

In Python, I never seem to see the `DENORM`, `DIVBYZERO` or `OVERFLOW`
bits set.

There is commonly this assumption that floating-point calculations
always have to be inexact. In fact, this is often not the case, so it
can be helpful to be able to check. For example, the abovementioned
`nearbyint` and `rint` functions return exactly the same results, but
the latter can also set the `INEXACT` exception bit when the result
differs from the argument passed.

    for a in (1.0, 1.5, 2.0) :
        fenv.EXCEPT.INEXACT.clear()
        b = fenv.rint(a)
        inexact = fenv.EXCEPT.INEXACT.test
        sys.stdout.write("%g => %g inexact %s\n" % (a, b, inexact))
    #end for

produces output

    1 => 1 inexact False
    1.5 => 2 inexact True
    2 => 2 inexact False

Calculations that cannot return exact results set `INEXACT`, as you would expect:

    a = 0.1
    for expr in (str(a), "a", "a + a", "a + a + a", "a + a + a + a", "(a + a) + (a + a)") :
        fenv.ExceptFlag.clear(fenv.EXCEPT_ALL)
        b = eval(expr)
        excepts = fenv.ExceptFlag.test(fenv.EXCEPT_ALL)
        sys.stdout.write("calc %s => %g sets %s\n" % (expr, b, excepts))
    #end for

produces output

    calc 0.1 => 0.1 sets frozenset({<EXCEPT.INEXACT: 5>})
    calc a => 0.1 sets frozenset()
    calc a + a => 0.2 sets frozenset()
    calc a + a + a => 0.3 sets frozenset({<EXCEPT.INEXACT: 5>})
    calc a + a + a + a => 0.4 sets frozenset({<EXCEPT.INEXACT: 5>})
    calc (a + a) + (a + a) => 0.4 sets frozenset()

Note the difference between the last two! Finite-precision arithmetic
does *not*, in general, obey the usual associativity and commutativity
laws. This is why you don’t want so-called “optimizing” compilers
silently reinterpreting one form as the other!

## What Use Is It? ##

One good reason for using the different rounding modes is as a quick
test of the numerical stability of a calculation: if the results are
close in the different modes, then that gives you some confidence in
their accuracy, while if they differ wildly, then you know that
something is wrong.

    with fenv.SaveRounding() :
        for r in fenv.ROUND :
            r.set()
            print \
              (
                sum(1 / (i + 1) for i in range(100)),
                sum(1 / (- i - 1) for i in range(100)),
                fenv.ROUND.get()
              )
        #end for
    #end with

produces output

    5.187377517639621 -5.187377517639621 ROUND.TONEAREST
    5.18737751763959 -5.1873775176396615 ROUND.DOWNWARD
    5.1873775176396615 -5.18737751763959 ROUND.UPWARD
    5.18737751763959 -5.18737751763959 ROUND.TOWARDZERO

## More Numerics Info ##

For more than you ever wanted to know about the pitfalls of computer
arithmetic, visit the [website](http://www.cs.berkeley.edu/~wkahan/)
of Professor William “Mr IEEE-754” Kahan.

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2016 December 14
